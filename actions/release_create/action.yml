---
name: "Release Create"
description: "A reusable action to create GitHub releases with optional VirusTotal scanning and automated cleanup."
author: "LizardByte"

branding:
  icon: tag
  color: green

inputs:
  allowUpdates:
    description: 'An optional flag which indicates if we should update a release if it already exists.'
    required: false
    default: 'true'
  artifactErrorsFailBuild:
    description: 'An optional flag which indicates if we should fail the build if there are errors with the artifacts.'
    required: false
    default: 'false'
  artifacts:
    description: 'The artifacts to upload.'
    required: false
    default: '*artifacts/*'
  body:
    description: 'The body of the release.'
    required: false
    default: ''
  deleteOtherPreReleases:
    description: 'Whether to delete other pre-releases.'
    required: false
    default: 'true'
  deletePreReleaseTags:
    description: 'Whether to delete other pre-releases tags.'
    required: false
    default: 'true'
  draft:
    description: 'Whether the release is a draft.'
    required: false
    default: 'false'
  generateReleaseNotes:
    description: 'Indicates if release notes should be automatically generated.'
    required: false
    default: 'true'
  keepPreReleaseCount:
    description: 'The number of pre-releases to keep. The default is 2 incase there are in process downloads.'
    required: false
    default: '2'
  name:
    description: 'The version to create.'
    required: true
  prerelease:
    description: 'Whether the release is a prerelease.'
    required: false
    default: 'true'
  sleepDuration:
    description: 'The duration to sleep in seconds before deleting tags.'
    required: false
    default: '15'
  tag:
    description: 'The tag to create.'
    required: true
  token:
    description: 'Github Token.'
    required: true
  virustotal_api_key:
    description: 'The VirusTotal API key to use for scanning the artifacts.'
    required: false

runs:
  using: "composite"
  steps:
    - name: VirusTotal
      if: inputs.virustotal_api_key != ''
      id: vt
      uses: cssnr/virustotal-action@v1.7.0
      with:
        file_globs: ${{ inputs.artifacts }}
        sha256: true
        summary: true
        update_release: false
        vt_api_key: ${{ inputs.virustotal_api_key }}

    - name: Format VirusTotal Results
      env:
        INPUT_BODY: ${{ inputs.body }}
        INPUT_TAG: ${{ inputs.tag }}
      if: inputs.virustotal_api_key != ''
      id: format-vt
      shell: bash
      run: |
        # Create body file with original content
        rb_file=release_body.md
        cat > ${rb_file} << BODY_EOF
        ${INPUT_BODY}
        BODY_EOF

        ASSETS_HEADER="📦 **Assets:**"

        # If we have existing results, append them
        if [ -n '${{ steps.vt.outputs.json }}' ]; then
          # Check if Assets header already exists, if not add it
          if ! grep -qF "$ASSETS_HEADER" ${rb_file}; then
            # Add separator if body exists and isn't empty
            if [ -s ${rb_file} ] && [ "$(cat ${rb_file} | tr -d '[:space:]')" != "" ]; then
              echo "" >> ${rb_file}
            fi

            {
              echo "---"
              echo "$ASSETS_HEADER"
              echo ""
              echo "| ⬇️ Download | #️⃣ Download Count | 🛡️ VirusTotal |"
              echo "|-------------|-------------------|---------------|"
            } >> ${rb_file}
          fi

          # Append VirusTotal results as table rows
          printf '%s\n' '${{ steps.vt.outputs.json }}' | \
            jq -r \
              --arg repo "${{ github.repository }}" \
              --arg tag "${INPUT_TAG}" \
              '.[] |
              "| [\(.name)](https://github.com/\($repo)/releases/download/\($tag)/\(.name)) | " +
              "![Downloads](https://img.shields.io/github/downloads/\($repo)/\($tag)/\(.name)" +
                "?style=flat-square&label=&displayAssetName=false) | " +
              "[![VirusTotal](https://badges.cssnr.com/vt/id/sha256:\(.sha256)" +
                "?style=flat-square&icon=virustotal&label=)](\(.link)) |"' \
            >> ${rb_file}
        fi

        # Set output
        {
          echo "body<<EOF"
          cat ${rb_file}
          echo "EOF"
        } >> $GITHUB_OUTPUT

    - name: Create/Update GitHub Release
      uses: ncipollo/release-action@v1.16.0
      with:
        allowUpdates: ${{ inputs.allowUpdates }}
        artifactErrorsFailBuild: ${{ inputs.artifactErrorsFailBuild }}
        artifacts: ${{ inputs.artifacts }}
        body: ${{ steps.format-vt.outputs.body || inputs.body }}
        commit: ${{ github.sha }}
        draft: ${{ inputs.draft }}
        generateReleaseNotes: ${{ inputs.generateReleaseNotes }}
        name: ${{ inputs.name }}
        prerelease: ${{ inputs.prerelease }}
        tag: ${{ inputs.tag }}
        token: ${{ inputs.token }}

    - name: Sleep
      # wait for the new release to be available in the API
      if: inputs.deleteOtherPreReleases == 'true'
      shell: bash
      run: sleep 30

    - name: Delete Other PreReleases
      env:
        DELETE_TAGS: ${{ inputs.deletePreReleaseTags }}
        IS_DRAFT: ${{ inputs.draft }}
        KEEP_LATEST: ${{ inputs.keepPreReleaseCount }}
        SLEEP_DURATION: ${{ inputs.sleepDuration }}
        CURRENT_TAG: ${{ inputs.tag }}
      if: inputs.deleteOtherPreReleases == 'true'
      uses: actions/github-script@v8
      with:
        github-token: ${{ inputs.token }}
        script: |
          const deleteOldPreReleases = require('${{ github.action_path }}/cleanup.js');
          await deleteOldPreReleases({ github, context });
