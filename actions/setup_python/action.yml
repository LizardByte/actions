---
name: "Setup Python"
description: "A reusable action to set up Python using pyenv on GitHub Actions runners."
author: "LizardByte"

branding:
  icon: code
  color: green

inputs:
  python-version:
    description: >
      The version(s) of Python to set up.
      Can be a single version or multiple versions separated by newlines or spaces.
    required: false
  python-version-file:
    description: >
      File containing the Python version to set up.
      Supports .python-version, pyproject.toml, .tool-versions, and Pipfile.
    required: false

outputs:
  python-version:
    description: "The version of Python that was set up."
    value: ${{ steps.outputs.outputs.python-version }}
  python-path:
    description: "The path to the Python executable."
    value: ${{ steps.outputs.outputs.python-path }}

runs:
  using: "composite"
  steps:
    - name: Install pyenv (Windows)
      shell: powershell
      if: ${{ runner.os == 'Windows' }}
      run: |
        Invoke-WebRequest `
          -UseBasicParsing `
          -Uri "https://raw.githubusercontent.com/pyenv-win/pyenv-win/master/pyenv-win/install-pyenv-win.ps1" `
          -OutFile "./install-pyenv-win.ps1"
        &"./install-pyenv-win.ps1"

        "$env:USERPROFILE\.pyenv\pyenv-win\shims" | Add-Content -Path $env:GITHUB_PATH
        "$env:USERPROFILE\.pyenv\pyenv-win\bin" | Add-Content -Path $env:GITHUB_PATH

    - name: Install pyenv (Unix)
      shell: bash
      if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
      run: |
        curl -fsSL https://pyenv.run | bash
        echo "${HOME}/.pyenv/bin" >> "${GITHUB_PATH}"

        # Fix git merge issue for pyenv update
        # https://github.com/pyenv/pyenv-update/issues/22#issuecomment-2757520230
        # Add origin/HEAD to each git repository in ~/.pyenv
        for repo in ~/.pyenv/plugins/*/ ~/.pyenv/; do
          if [[ -d "${repo}/.git" ]]; then
            cd "${repo}"
            git remote set-head origin -a
          fi
        done

    - name: Update pyenv
      shell: bash
      run: pyenv update

    - name: Determine Python Version(s)
      id: determine-version
      shell: bash
      env:
        INPUT_PYTHON_VERSION: ${{ inputs.python-version }}
        INPUT_PYTHON_VERSION_FILE: ${{ inputs.python-version-file }}
      run: |
        # Source the version determination script
        source "${{ github.action_path }}/determine_version.sh"

        # Determine versions using the shared function
        determine_python_version "${INPUT_PYTHON_VERSION}" "${INPUT_PYTHON_VERSION_FILE}"

        echo "Python versions to install: ${PYTHON_VERSIONS}"
        echo "Default Python version: ${DEFAULT_PYTHON_VERSION}"
        echo "versions=${PYTHON_VERSIONS}" >> $GITHUB_OUTPUT
        echo "default-version=${DEFAULT_PYTHON_VERSION}" >> $GITHUB_OUTPUT

    - name: Available Python versions
      shell: bash
      run: pyenv install --list

    - name: Install Python
      env:
        PYTHON_VERSIONS: ${{ steps.determine-version.outputs.versions }}
        DEFAULT_VERSION: ${{ steps.determine-version.outputs.default-version }}
      shell: bash
      run: |
        # Convert space-separated versions to array
        IFS=' ' read -ra version_array <<< "${PYTHON_VERSIONS}"

        # Install each version
        for version in "${version_array[@]}"; do
          echo "Installing Python ${version}..."
          pyenv install ${version}
        done

        # Set only the default version as global
        pyenv global ${DEFAULT_VERSION}

        echo "Default Python version set to: ${DEFAULT_VERSION}"

    - name: Setup Python Environment
      env:
        DEFAULT_VERSION: ${{ steps.determine-version.outputs.default-version }}
      shell: bash
      run: |
        echo "Current system Python Version:"
        python --version

        echo "Setting paths"
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          # set venv path
          venv_base_path="/c/tmp/python/venv"
          venv_base_path_windows="C:\\tmp\\python\\venv"
          venv_dir="Scripts"
        elif [[ "${{ runner.os }}" == "Linux" || "${{ runner.os }}" == "macOS" ]]; then
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            # update alternatives
            sudo update-alternatives --install /usr/bin/python python $(pyenv root)/shims/python 1
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            export PATH="$(pyenv root)/shims:$(pyenv root)/bin:$PATH"  # use this instead of GITHUB_PATH to be first
          fi
          venv_base_path="/tmp/python/venv"
          venv_dir="bin"
        fi

        echo "New Python version:"
        python --version

        # bootstrap pip as it's not available in all Python installs (Windows with Python 2.7 mostly)
        pip_exists=false
        if python -m pip --version >/dev/null 2>&1; then
          pip_exists=true
        fi

        # Extract major.minor version (e.g., "2.7.18" -> "2.7", "2.7-win32" -> "2.7", "3.10.5" -> "3.10")
        python_version_two_digit=$(echo "${DEFAULT_VERSION}" | sed -E 's/^([0-9]+\.[0-9]+).*$/\1/')

        # Convert version to comparable format (e.g., "2.7" -> 27, "3.10" -> 310)
        version_major=$(echo "${python_version_two_digit}" | cut -d. -f1)
        version_minor=$(echo "${python_version_two_digit}" | cut -d. -f2)
        version_numeric=$((version_major * 100 + version_minor))

        if [[ "${pip_exists}" == "false" ]]; then
          echo "Bootstrapping pip for Python ${python_version_two_digit}"
          get_pip_url=""
          if [[ $version_numeric -ge 206 ]] && [[ $version_numeric -le 308 ]]; then
            get_pip_url="https://bootstrap.pypa.io/pip/${python_version_two_digit}/get-pip.py"
          elif [[ $version_numeric -gt 308 ]]; then
            get_pip_url="https://bootstrap.pypa.io/pip/get-pip.py"
          fi

          if [[ -z "${get_pip_url}" ]]; then
            # TODO: this isn't working for 2.7-win32 or 2.7 on windows-11-arm runner
            # Set environment variables to suppress SSL warnings and handle deprecation warnings
            export PYTHONWARNINGS="ignore:InsecurePlatformWarning"

            curl -fsSL "${get_pip_url}" --output get-pip.py
            python get-pip.py
            rm -f get-pip.py
          else
            python -m ensurepip --default-pip
          fi
        fi

        echo "Installing virtualenv"
        python -m pip install virtualenv

        # create venv
        python -m virtualenv ${venv_base_path}

        # activate venv
        source ${venv_base_path}/${venv_dir}/activate

        # update
        python -m pip --no-python-version-warning --disable-pip-version-check install --upgrade pip setuptools

        # update the path environment, so the next steps can use the venv
        # required to use the shell
        if [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "${venv_base_path_windows}\\${venv_dir}" >> "${GITHUB_PATH}"
        else
            echo "${venv_base_path}/${venv_dir}" >> "${GITHUB_PATH}"
        fi

        # show python version
        echo "Python venv version:"
        python --version

    - name: Set outputs
      id: outputs
      shell: bash
      run: |
        python_path=$(which python)

        # Convert to Windows path format on Windows runners
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          python_path=$(cygpath -w "${python_path}")
        fi

        {
          echo "python-version=$(pyenv version-name)"
          echo "python-path=${python_path}"
        } >> "${GITHUB_OUTPUT}"
